---
source: ch6/src/pass/instruction_selection.rs
expression: result.to_string_pretty()
---
locals: {x.1: Array(Bool), (bounds-tmp-index).0: Int, y.3: Array(Int), (bounds-tmp-index).2: Int, z.5: Array(Array(Bool)), (bounds-tmp-index).4: Int, t.7: Array(Void), (bounds-tmp-index).6: Int, (bounds-tmp-vec).9: Array(Bool), (bounds-tmp-index).10: Int, tmp.0: Int, tmp.1: Int, (bounds-tmp-vec).11: Array(Void), (bounds-tmp-index).12: Int, tmp.2: Int, tmp.3: Int, (bounds-tmp-vec).13: Array(Void), (bounds-tmp-index).16: Int, (bounds-tmp-vec).14: Array(Int), (bounds-tmp-index).15: Int, tmp.4: Int, tmp.5: Int, tmp.6: Int, tmp.7: Int, tmp.8: Int}

constants: {}

start:
    mov (bounds-tmp-index).0, 3
    cmp (bounds-tmp-index).0, 0
    jge block24
    jmp block25
block24:
    mov rsi, (bounds-tmp-index).0
    shl rsi, 3
    mov rdi, (bounds-tmp-index).0
    shl rdi, 5
    or rdi, 5
    mov rdx, r15
    call rt_allocate
    mov rdi, rax
    mov rsi, 1
    call rt_fill_array
    mov x.1, rax
    jmp block23
block25:
    mov rdi, (bounds-tmp-index).0
    call rt_length_error
block23:
    mov (bounds-tmp-index).2, 0
    cmp (bounds-tmp-index).2, 0
    jge block21
    jmp block22
block21:
    mov rsi, (bounds-tmp-index).2
    shl rsi, 3
    mov rdi, (bounds-tmp-index).2
    shl rdi, 5
    or rdi, 5
    mov rdx, r15
    call rt_allocate
    mov rdi, rax
    mov rsi, 2
    call rt_fill_array
    mov y.3, rax
    jmp block20
block22:
    mov rdi, (bounds-tmp-index).2
    call rt_length_error
block20:
    mov (bounds-tmp-index).4, 2
    cmp (bounds-tmp-index).4, 0
    jge block18
    jmp block19
block18:
    mov rsi, (bounds-tmp-index).4
    shl rsi, 3
    mov rdi, (bounds-tmp-index).4
    shl rdi, 5
    or rdi, 13
    mov rdx, r15
    call rt_allocate
    mov rdi, rax
    mov rsi, x.1
    call rt_fill_array
    mov z.5, rax
    jmp block17
block19:
    mov rdi, (bounds-tmp-index).4
    call rt_length_error
block17:
    mov (bounds-tmp-index).6, 10
    cmp (bounds-tmp-index).6, 0
    jge block15
    jmp block16
block15:
    mov rsi, 0
    mov rdi, (bounds-tmp-index).6
    shl rdi, 5
    or rdi, 21
    mov rdx, r15
    call rt_allocate
    mov t.7, rax
    jmp block14
block16:
    mov rdi, (bounds-tmp-index).6
    call rt_length_error
block14:
    mov (bounds-tmp-vec).9, x.1
    mov (bounds-tmp-index).10, 1
    cmp (bounds-tmp-index).10, 0
    jge block13
    jmp block12
block13:
    mov r11, (bounds-tmp-vec).9
    mov tmp.0, qword [r11]
    shr tmp.0, 5
    cmp (bounds-tmp-index).10, tmp.0
    jl block11
    jmp block12
block12:
    mov r11, (bounds-tmp-vec).9
    mov tmp.1, qword [r11]
    shr tmp.1, 5
    mov rdi, (bounds-tmp-index).10
    mov rsi, tmp.1
    call rt_out_of_bounds_error
block11:
    mov r11, (bounds-tmp-index).10
    add r11, 1
    shl r11, 3
    add r11, (bounds-tmp-vec).9
    mov qword [r11], 0
    jmp block10
block10:
    mov (bounds-tmp-vec).11, t.7
    mov (bounds-tmp-index).12, 3
    cmp (bounds-tmp-index).12, 0
    jge block9
    jmp block8
block9:
    mov r11, (bounds-tmp-vec).11
    mov tmp.2, qword [r11]
    shr tmp.2, 5
    cmp (bounds-tmp-index).12, tmp.2
    jl block7
    jmp block8
block8:
    mov r11, (bounds-tmp-vec).11
    mov tmp.3, qword [r11]
    shr tmp.3, 5
    mov rdi, (bounds-tmp-index).12
    mov rsi, tmp.3
    call rt_out_of_bounds_error
block7:
    mov (bounds-tmp-vec).13, t.7
    mov (bounds-tmp-vec).14, y.3
    mov (bounds-tmp-index).15, 0
    cmp (bounds-tmp-index).15, 0
    jge block6
    jmp block5
block6:
    mov r11, (bounds-tmp-vec).14
    mov tmp.4, qword [r11]
    shr tmp.4, 5
    cmp (bounds-tmp-index).15, tmp.4
    jl block4
    jmp block5
block5:
    mov r11, (bounds-tmp-vec).14
    mov tmp.5, qword [r11]
    shr tmp.5, 5
    mov rdi, (bounds-tmp-index).15
    mov rsi, tmp.5
    call rt_out_of_bounds_error
block4:
    mov r11, (bounds-tmp-index).15
    add r11, 1
    shl r11, 3
    add r11, (bounds-tmp-vec).14
    mov (bounds-tmp-index).16, qword [r11]
    jmp block3
block3:
    cmp (bounds-tmp-index).16, 0
    jge block2
    jmp block1
block2:
    mov r11, (bounds-tmp-vec).13
    mov tmp.6, qword [r11]
    shr tmp.6, 5
    cmp (bounds-tmp-index).16, tmp.6
    jl block0
    jmp block1
block1:
    mov r11, (bounds-tmp-vec).13
    mov tmp.7, qword [r11]
    shr tmp.7, 5
    mov rdi, (bounds-tmp-index).16
    mov rsi, tmp.7
    call rt_out_of_bounds_error
block0:
    mov r11, t.7
    mov tmp.8, qword [r11]
    shr tmp.8, 5
    mov rdi, tmp.8
    call rt_print_int
    call rt_print_newline
    jmp conclusion

