---
source: ch7/src/pass/remove_complex_operands.rs
assertion_line: 59
expression: prog.to_string_pretty()
---
(define
 (foo [x.0 (array-of (array-of Int))]) : Void
 (let
  [y.1 (read)]
  (let
   [z.2 y.1]
   (begin
    (let
     [(bounds-tmp-vec).6
      (let
       [(bounds-tmp-vec).3 x.0]
       (let
        [(bounds-tmp-index).5
         (let
          [(dividend-tmp).4
           (if (eq? y.1 0)
            (div-by-zero)
            (quotient 7 y.1))]
          (if (eq? 2 0)
           (div-by-zero)
           (remainder (dividend-tmp).4 2)))]
        (if
         (if (>= (bounds-tmp-index).5 0)
          (let
           [(tmp).0
            (vector-length (bounds-tmp-vec).3)]
           (< (bounds-tmp-index).5 (tmp).0))
          #f)
         (vector-ref
          (bounds-tmp-vec).3
          (bounds-tmp-index).5)
         (let
          [(tmp).1
           (vector-length (bounds-tmp-vec).3)]
          (out-of-bounds-error
           (bounds-tmp-index).5
           (tmp).1)))))]
     (let
      [(bounds-tmp-index).7 3]
      (if
       (if (>= (bounds-tmp-index).7 0)
        (let
         [(tmp).2
          (vector-length (bounds-tmp-vec).6)]
         (< (bounds-tmp-index).7 (tmp).2))
        #f)
       (let
        [(tmp).3 {z.2}]
        (vector-set!
         (bounds-tmp-vec).6
         (bounds-tmp-index).7
         (tmp).3))
       (let
        [(tmp).4
         (vector-length (bounds-tmp-vec).6)]
        (out-of-bounds-error
         (bounds-tmp-index).7
         (tmp).4)))))
    (if #t
     (let
      [(tmp).5 {z.2}]
      (> (tmp).5 1))
     #f)
    (set!
     z.2
     (let
      [(tmp).6 {z.2}]
      (+ (tmp).6 1)))))))
(define (bar [s.8 Id { idx: 0 }]) : Void
 (let
  [(string-append-tmp-1).9 "-"]
  (let
   [(string-append-tmp-2).14
    (let
     [(string-append-tmp-1).10 ","]
     (let
      [(string-append-tmp-2).11
       (vector-ref s.8 0)]
      (let
       [(string-append-len-1).12
        (string-length (string-append-tmp-1).10)]
       (let
        [(string-append-tmp-3).13
         (let
          [(tmp).7
           (string-length
            (string-append-tmp-2).11)]
          (let
           [(tmp).8
            (+ (string-append-len-1).12 (tmp).7)]
           (alloc-string (tmp).8)))]
        (begin
         (copy-string!
          (string-append-tmp-3).13
          0
          (string-append-tmp-1).10)
         (copy-string!
          (string-append-tmp-3).13
          (string-append-len-1).12
          (string-append-tmp-2).11)
         (string-append-tmp-3).13)))))]
   (let
    [(string-append-len-1).15
     (string-length (string-append-tmp-1).9)]
    (let
     [(string-append-tmp-3).16
      (let
       [(tmp).9
        (string-length (string-append-tmp-2).14)]
       (let
        [(tmp).10
         (+ (string-append-len-1).15 (tmp).9)]
        (alloc-string (tmp).10)))]
     (let
      [(tmp).11
       (begin
        (copy-string!
         (string-append-tmp-3).16
         0
         (string-append-tmp-1).9)
        (copy-string!
         (string-append-tmp-3).16
         (string-append-len-1).15
         (string-append-tmp-2).14)
        (string-append-tmp-3).16)]
      (vector-set! s.8 0 (tmp).11)))))))
(void)
