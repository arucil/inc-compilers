---
source: ch7/src/pass/remove_complex_operands.rs
expression: prog.to_string_pretty()
---
(define
 (foo [x.0 (array-of (array-of Int))]) : Void
 (let
  [y.1 (read)]
  (let
   [z.2 y.1]
   (begin
    (let
     [(bounds-tmp).2
      (let
       [(bounds-tmp).1
        (let
         [(div-tmp).1
          (if (eq? y.1 0)
           (div-by-zero)
           (quotient 7 y.1))]
         (if (eq? 2 0)
          (div-by-zero)
          (remainder (div-tmp).1 2)))]
       (if
        (if (>= (bounds-tmp).1 0)
         (let
          [(tmp).0 (vector-length x.0)]
          (< (bounds-tmp).1 (tmp).0))
         #f)
        (vector-ref x.0 (bounds-tmp).1)
        (let
         [(tmp).1 (vector-length x.0)]
         (out-of-bounds-error
          (bounds-tmp).1
          (tmp).1))))]
     (if
      (if (>= 3 0)
       (let
        [(tmp).2 (vector-length (bounds-tmp).2)]
        (< 3 (tmp).2))
       #f)
      (let
       [(tmp).3 {z.2}]
       (vector-set! (bounds-tmp).2 3 (tmp).3))
      (let
       [(tmp).4 (vector-length (bounds-tmp).2)]
       (out-of-bounds-error 3 (tmp).4))))
    (if #t
     (let
      [(tmp).5 {z.2}]
      (> (tmp).5 1))
     #f)
    (set!
     z.2
     (let
      [(tmp).6 {z.2}]
      (+ (tmp).6 1)))))))
(define (bar [s.3 Id { idx: 0 }]) : Void
 (let
  [(str-tmp).5 "-"]
  (let
   [(str-tmp).6
    (let
     [(str-tmp).1 ","]
     (let
      [(str-tmp).2 (vector-ref s.3 0)]
      (let
       [(str-tmp).3 (string-length (str-tmp).1)]
       (let
        [(str-tmp).4
         (let
          [(tmp).7 (string-length (str-tmp).2)]
          (let
           [(tmp).8 (+ (str-tmp).3 (tmp).7)]
           (alloc-string (tmp).8)))]
        (begin
         (copy-string! (str-tmp).4 0 (str-tmp).1)
         (copy-string!
          (str-tmp).4
          (str-tmp).3
          (str-tmp).2)
         (str-tmp).4)))))]
   (let
    [(str-tmp).7 (string-length (str-tmp).5)]
    (let
     [(str-tmp).8
      (let
       [(tmp).9 (string-length (str-tmp).6)]
       (let
        [(tmp).10 (+ (str-tmp).7 (tmp).9)]
        (alloc-string (tmp).10)))]
     (let
      [(tmp).11
       (begin
        (copy-string! (str-tmp).8 0 (str-tmp).5)
        (copy-string!
         (str-tmp).8
         (str-tmp).7
         (str-tmp).6)
        (str-tmp).8)]
      (vector-set! s.3 0 (tmp).11)))))))
(void)
